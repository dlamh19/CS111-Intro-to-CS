Sorting

insertion sort is O(n^2)
selection sort 

insetion sort, best case: sorted 0(n), worse case: o(n^2)
selection sort, best case and worse case is the same o(n^2)
merge sort, 	

===========
Merge Sort 

public static void sort (int[] a, int lo, int hi)
{   
	// sort a[lo, hi)
    int n = hi - lo;
    if ( n <= 1 ) 
    	return;   

    int middle = lo + (n/2);

    sort(a, lo, middle);
    sort(a, middle, hi);
    merge(a, lo, middle, hi);
}

public static void merge (int[] a, int lo, int mid, int hi)
{
   	// merge a[lo,mid) with a[mid,hi) into aux[0,hi-lo)   
   	int i =  lo
    int j = mid;
    int n = hi - lo;
    int[] aux = new int[n];

    for ( int k = 0; k < n; k++ ) 
    { 
       	if ( i == mid ) 
       		aux[k] = a[j++];
      	else if ( j == hi ) 
      		aux[k] = a[i++];
       	else if ( a[j] < a[i]) 
      		aux[k] = a[j++];
      	else 
      		aux[k] = a[i++];
    }

  	// copy back into a[lo, hi)   
  	for ( int k = 0; k < n; k++ ) 
  	{     
  		a[lo+k] = aux[k];  	
  	}
}

7,14,3,5,8,2

following code

sort(a,0,6), n = 6, middle = 0 + 3
A) sort(a,0,3) n = 3, middle = 0 + 1
	A) sort(a,0,1), n = 1 
	B) sort(a,1,3), n = 2, middle = 1 + 1
		A) sort(a,1,2) n = 1
		B) sort(a,2,3) n = 1
		C) merge(a,1,2,3)
			i = 1, j = 2, n = 2
			7,14,3,5,8,2
			7,3,3,5,8,2
			7,3,14,5,8,2
	C) merge(a,0,1,3)
		i = 0, j = 1, n = 3
		3,7,14,5,8,2
B) sort(a, 3, 6) n = 3, middle = 3 + 1
	A) sort(a, 3, 4) n = 1
	B) sort(a, 4, 6) n = 2, middle = 4 + 1
		A) sort(a, 4, 5) n = 1
		B) sort(a, 5, 6) n = 1
		C) merge(a, 4, 5, 6) 




==========
{7,9,3,15,8,2,1}
sort(a,0,7)
merge sort sorts from lo to hi but not including hi








































